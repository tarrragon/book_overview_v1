const Logger = require('src/core/logging/Logger')
/**
 * 集中化訊息字典系統
 *
 * 設計目標：
 * - 集中化管理所有硬編碼文字，統一文字輸出
 * - 支援參數替換，處理動態內容
 * - 記憶體使用 < 100KB
 * - 查詢時間 < 0.1ms
 * - 支援多語系擴展（預留）
 *
 * @example
 * const messages = new MessageDictionary()
 * messages.get('BOOK_COUNT', { count: 5 }) // "找到 5 本書"
 * messages.set('CUSTOM_MESSAGE', '自訂訊息: {value}')
 */

const { StandardError } = require('src/core/errors/StandardError')

class MessageDictionary {
  /**
   * 建立訊息字典實例
   * @param {string} language - 語言代碼 (預設: 'zh-TW')
   */
  constructor (language = 'zh-TW') {
    this.messages = this._loadDefaultMessages()
    this.language = language
    this._cacheSize = 0
    this._maxCacheSize = 100 * 1024 // 100KB 限制
  }

  /**
   * 載入預設訊息
   * @private
   * @returns {Object} 預設訊息物件
   */
  _loadDefaultMessages () {
    return {
      // 錯誤訊息
      VALIDATION_FAILED: '資料驗證失敗',
      NETWORK_ERROR: '網路連線異常',
      STORAGE_ERROR: '儲存操作失敗',
      PERMISSION_DENIED: '權限不足',
      UNKNOWN_ERROR: '未知錯誤',

      // 操作訊息
      OPERATION_START: '開始執行操作',
      OPERATION_COMPLETE: '操作完成',
      OPERATION_CANCELLED: '操作已取消',
      OPERATION_TIMEOUT: '操作逾時',
      OPERATION_RETRY: '重試操作',

      // 系統訊息
      SYSTEM_READY: '系統準備就緒',
      SYSTEM_SHUTDOWN: '系統正在關閉',
      LOADING: '載入中...',
      PROCESSING: '處理中...',

      // 書庫相關訊息
      BOOK_EXTRACTION_START: '開始提取書籍資料',
      BOOK_EXTRACTION_COMPLETE: '書籍資料提取完成',
      BOOK_COUNT: '找到 {count} 本書',
      BOOK_PROGRESS_UPDATE: '書籍 {title} 進度更新為 {progress}%',
      BOOK_VALIDATION_FAILED: '書籍 {title} 資料驗證失敗',

      // Chrome Extension 相關
      EXTENSION_READY: '擴充功能準備就緒',
      CONTENT_SCRIPT_LOADED: '內容腳本已載入',
      POPUP_OPENED: '彈出視窗已開啟',
      BACKGROUND_SCRIPT_ACTIVE: '背景腳本運行中',

      // 使用者訊息
      SUCCESS: '成功',
      FAILED: '失敗',
      RETRY: '重試',
      CANCEL: '取消',
      CONFIRM: '確認',

      // 測試專用訊息
      TEST_MESSAGE: '測試訊息',
      TEST_WITH_PARAMS: '測試參數: {param1} 和 {param2}',

      // 日誌相關
      DEBUG_MESSAGE: '除錯訊息: {message}',
      INFO_MESSAGE: '資訊: {message}',
      WARN_MESSAGE: '警告: {message}',
      ERROR_MESSAGE: '錯誤: {message}',

      // 驗證相關訊息模板
      VALIDATOR_INIT: '驗證器初始化',
      VALIDATION_START: '開始資料驗證',
      VALIDATION_SUCCESS: '資料驗證成功',
      VALIDATION_TIMEOUT: '驗證逾時',
      VALIDATION_RETRY: '重新驗證',
      VALIDATION_CACHE_HIT: '命中驗證快取',

      // 資料提取相關訊息模板
      DATA_EXTRACTION_START: '開始資料提取',
      DATA_EXTRACTION_EMPTY: '提取的資料為空',
      DATA_EXTRACTION_COMPLETE: '資料提取完成',
      DATA_VALIDATION_FAILED: '資料驗證失敗',

      // 平台檢測相關訊息模板
      PLATFORM_DETECTION_START: '開始平台檢測',
      PLATFORM_CONFIDENCE_LOW: '平台檢測信心度較低',

      // 錯誤處理相關訊息模板
      ERROR_CATEGORIZED: '錯誤已分類',
      EVENT_SYSTEM_START: '事件系統啟動',
      EVENT_EMIT_FAILED: '事件發送失敗',

      // 書籍處理相關訊息模板
      BOOK_CONTAINERS_FOUND: '找到書籍容器',
      BOOK_CONTAINERS_PARSE_FAILED: '書籍容器解析失敗',
      BOOK_BATCH_PARSE_FAILED: '批次書籍解析失敗',
      NO_BOOK_ELEMENTS_FOUND: '未找到書籍元素',
      BOOKS_DATA_UPDATED: '書籍資料已更新',
      BOOKS_DATA_UPDATE_WARNING: '書籍資料更新警告',

      // 組件和系統相關訊息模板
      COMPONENT_INIT: '組件初始化',
      CLEANUP_SUCCESS: '清理成功',
      CACHE_CLEANUP: '快取清理',
      MODULAR_COMPONENTS_SUCCESS: '模組化組件載入成功',
      EXTRACTION_COMPLETED: '提取作業完成',

      // 搜尋和篩選相關訊息模板
      SEARCH_CLEARED: '搜尋已清除',
      SEARCH_EXECUTION_ERROR: '搜尋執行錯誤',
      FILTER_APPLICATION_ERROR: '篩選應用錯誤',
      UNSAFE_COVER_URL_FILTERED: '不安全的封面網址已過濾',

      // 回退策略相關訊息模板
      FALLBACK_SELECTOR_ATTEMPT: '嘗試回退選擇器',
      LAST_RESORT_STRATEGY: '最後手段策略',

      // 配置相關訊息模板
      CONFIG_VALIDATION_FAILED: '配置驗證失敗',

      // 多語言支援
      未知的篩選條件: '未知的篩選條件',
      '索引搜尋失敗，回退到線性搜尋': '索引搜尋失敗，回退到線性搜尋',
      'Event listener registration failed': '事件監聽器註冊失敗'
    }
  }

  /**
   * 取得訊息
   * @param {string} key - 訊息鍵值
   * @param {Object} params - 參數物件
   * @returns {string} 處理後的訊息
   */
  get (key, params = {}) {
    const message = this.messages[key]
    return message ? this._replaceParameters(message, params) : `[Missing: ${key}]`
  }

  /**
   * 參數替換處理
   * @private
   * @param {string} message - 原始訊息
   * @param {Object} params - 參數物件
   * @returns {string} 替換後的訊息
   */
  _replaceParameters (message, params) {
    try {
      let result = message

      // 替換所有 {key} 格式的參數
      Object.keys(params).forEach(param => {
        const placeholder = `{${param}}`
        const value = params[param]

        // 處理不同類型的參數值
        let replacement
        if (value === null || value === undefined) {
          replacement = ''
        } else if (typeof value === 'object') {
          replacement = JSON.stringify(value)
        } else {
          replacement = String(value)
        }

        // 全域替換
        result = result.replace(new RegExp(this._escapeRegExp(placeholder), 'g'), replacement)
      })

      return result
    } catch (error) {
      // 參數替換失敗時返回原始訊息
      return message
    }
  }

  /**
   * 跳脫正則表達式特殊字符
   * @private
   * @param {string} string - 要跳脫的字串
   * @returns {string} 跳脫後的字串
   */
  _escapeRegExp (string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
  }

  /**
   * 設定或更新訊息
   * @param {string} key - 訊息鍵值
   * @param {string} message - 訊息內容
   */
  set (key, message) {
    if (typeof key !== 'string' || typeof message !== 'string') {
      throw new StandardErrorWrapper('UNKNOWN_ERROR', 'Message key and value must be strings', {
        category: 'general'
      })
    }

    // 檢查快取大小限制
    if (this._checkCacheSize(key, message)) {
      this.messages[key] = message
      this._updateCacheSize()
    }
  }

  /**
   * 批次新增訊息
   * @param {Object} messages - 訊息物件
   */
  addMessages (messages) {
    if (!messages || typeof messages !== 'object') {
      throw new StandardErrorWrapper('UNKNOWN_ERROR', 'Messages must be an object', {
        dataType: 'object',
        category: 'general'
      })
    }

    // 檢查總大小限制
    const estimatedSize = this._estimateSize(messages)
    if (this._cacheSize + estimatedSize > this._maxCacheSize) {
      throw new StandardErrorWrapper('LIMIT_EXCEEDED', 'Adding messages would exceed cache size limit', {
        category: 'general'
      })
    }

    Object.assign(this.messages, messages)
    this._updateCacheSize()
  }

  /**
   * 檢查快取大小限制
   * @private
   * @param {string} key - 鍵值
   * @param {string} message - 訊息
   * @returns {boolean} 是否在限制內
   */
  _checkCacheSize (key, message) {
    const itemSize = this._estimateSize({ [key]: message })

    if (this._cacheSize + itemSize > this._maxCacheSize) {
      // eslint-disable-next-line no-console
      Logger.warn(`MessageDictionary: Adding "${key}" would exceed cache limit (${this._maxCacheSize / 1024}KB)`)
      return false
    }

    return true
  }

  /**
   * 估算物件大小
   * @private
   * @param {Object} obj - 要估算的物件
   * @returns {number} 估算的位元組大小
   */
  _estimateSize (obj) {
    try {
      return JSON.stringify(obj).length * 2 // 每個字符約 2 bytes (Unicode)
    } catch (error) {
      return 1000 // 預設估算
    }
  }

  /**
   * 更新快取大小記錄
   * @private
   */
  _updateCacheSize () {
    this._cacheSize = this._estimateSize(this.messages)
  }

  /**
   * 檢查訊息是否存在
   * @param {string} key - 訊息鍵值
   * @returns {boolean} 是否存在
   */
  has (key) {
    return Object.prototype.hasOwnProperty.call(this.messages, key)
  }

  /**
   * 刪除訊息
   * @param {string} key - 要刪除的訊息鍵值
   * @returns {boolean} 是否成功刪除
   */
  delete (key) {
    if (this.has(key)) {
      delete this.messages[key]
      this._updateCacheSize()
      return true
    }
    return false
  }

  /**
   * 取得所有訊息鍵值
   * @returns {Array<string>} 所有鍵值陣列
   */
  keys () {
    return Object.keys(this.messages)
  }

  /**
   * 取得訊息統計
   * @returns {Object} 統計資訊
   */
  getStats () {
    return {
      messageCount: Object.keys(this.messages).length,
      cacheSize: this._cacheSize,
      maxCacheSize: this._maxCacheSize,
      usage: `${((this._cacheSize / this._maxCacheSize) * 100).toFixed(2)}%`,
      language: this.language
    }
  }

  /**
   * 清空所有訊息（重置為預設）
   */
  reset () {
    this.messages = this._loadDefaultMessages()
    this._updateCacheSize()
  }

  /**
   * 匯出所有訊息
   * @returns {Object} 所有訊息的複製
   */
  export () {
    return { ...this.messages }
  }
}

// 建立全域訊息字典實例
const GlobalMessages = new MessageDictionary()

// 匯出類別和全域實例
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { MessageDictionary, GlobalMessages }
} else if (typeof window !== 'undefined') {
  window.MessageDictionary = MessageDictionary
  window.GlobalMessages = GlobalMessages
}
