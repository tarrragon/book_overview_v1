/**
 * PopupUIManager Êï¥ÂêàÊ∏¨Ë©¶
 *
 * Ê∏¨Ë©¶ÁõÆÊ®ôÔºö
 * - È©óË≠â PopupUIManager ËàáÊñ∞ÁöÑÊ®°ÁµÑÂåñÁµÑ‰ª∂Êï¥Âêà
 * - Á¢∫‰øùÁßªÈô§ÁãÄÊÖãÁÆ°ÁêÜÈáçË§áÂæåÂäüËÉΩÊ≠£Â∏∏
 * - Ê∏¨Ë©¶ UI Êõ¥Êñ∞Ê©üÂà∂ËàáÁãÄÊÖãÁÆ°ÁêÜÂô®ÂàÜÈõ¢
 *
 * @jest-environment jsdom
 */

// Mock DOM Áí∞Â¢É
const { JSDOM } = require('jsdom')

describe('PopupUIManager Ê®°ÁµÑÂåñÊï¥ÂêàÊ∏¨Ë©¶', () => {
  let dom
  let document
  let window
  let uiManager
  let mockStatusManager
  let mockProgressManager

  beforeEach(() => {
    // Âª∫Á´ã JSDOM Áí∞Â¢É
    dom = new JSDOM(`
      <!DOCTYPE html>
      <html>
      <body>
        <div id="error-container" class="hidden">
          <div id="error-title"></div>
          <div id="error-message"></div>
          <div id="error-actions"></div>
        </div>
        <div id="success-container" class="hidden">
          <div id="success-message"></div>
        </div>
        <div id="status-container">
          <div id="status-message"></div>
        </div>
        <div id="loading-overlay" class="hidden">
          <div id="loading-spinner"></div>
        </div>
        <div id="progress-bar" style="width: 0%"></div>
        <div id="diagnostic-panel" class="hidden">
          <div id="diagnostic-content"></div>
        </div>
      </body>
      </html>
    `, { url: 'chrome-extension://test/popup.html' })

    window = dom.window
    document = window.document
    global.window = window
    global.document = document

    // Âª∫Á´ã Mock ÁãÄÊÖãÂíåÈÄ≤Â∫¶ÁÆ°ÁêÜÂô®
    mockStatusManager = {
      updateStatus: jest.fn(),
      getCurrentStatus: jest.fn().mockReturnValue({
        type: 'ready',
        text: 'Â∞±Á∑í',
        info: ''
      })
    }

    mockProgressManager = {
      updateProgress: jest.fn(),
      getCurrentProgress: jest.fn().mockReturnValue({
        percentage: 0,
        status: 'idle',
        isVisible: false
      })
    }

    // ËºâÂÖ• PopupUIManager
    const PopupUIManager = require('src/popup/popup-ui-manager.js')
    uiManager = new PopupUIManager(document)
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  describe('üìã DOM ÂÖÉÁ¥†ÁÆ°ÁêÜ (Ê†∏ÂøÉËÅ∑Ë≤¨)', () => {
    test('ÊáâË©≤Ê≠£Á¢∫ÂàùÂßãÂåñÂíåÂø´Âèñ DOM ÂÖÉÁ¥†', () => {
      // Given: UIManager Â∑≤ÂàùÂßãÂåñ

      // When: Ê™¢Êü•Ê†∏ÂøÉÂÖÉÁ¥†
      const coreElements = [
        'errorContainer', 'successContainer', 'statusMessage',
        'loadingOverlay', 'progressBar', 'diagnosticPanel'
      ]

      // Then: ÊâÄÊúâÊ†∏ÂøÉÂÖÉÁ¥†ÈÉΩÊáâË©≤Ë¢´Âø´Âèñ
      coreElements.forEach(key => {
        expect(uiManager.elements[key]).toBeTruthy()
        expect(uiManager.elements[key]).toBeInstanceOf(window.Element)
      })
    })

    test('ÊáâË©≤Êèê‰æõÁµ±‰∏ÄÁöÑÂÖÉÁ¥†Â≠òÂèñ API', () => {
      // Given: UIManager Â∑≤ÂàùÂßãÂåñ

      // When: ‰ΩøÁî® elements Â±¨ÊÄßÂ≠òÂèñÂÖÉÁ¥†
      const errorContainer = uiManager.elements.errorContainer
      const statusMessage = uiManager.elements.statusMessage

      // Then: ÊáâË©≤ËøîÂõûÊ≠£Á¢∫ÁöÑ DOM ÂÖÉÁ¥†
      expect(errorContainer).toBe(document.getElementById('error-container'))
      expect(statusMessage).toBe(document.getElementById('status-message'))
    })
  })

  describe('üé® UI È°ØÁ§∫ÊéßÂà∂ (Ë¶ñË¶∫Â±§ËÅ∑Ë≤¨)', () => {
    test('ÊáâË©≤ËÉΩÈ°ØÁ§∫ÈåØË™§Ë®äÊÅØ (Á¥î UI Êìç‰Ωú)', () => {
      // Given: ÈåØË™§Ë≥áÊñô
      const errorData = {
        title: 'ÊèêÂèñÂ§±Êïó',
        message: 'ÁÑ°Ê≥ïÈÄ£Êé•Âà∞ÊúçÂãôÂô®',
        actions: ['ÈáçË©¶']
      }

      // When: È°ØÁ§∫ÈåØË™§
      uiManager.showError(errorData)

      // Then: UI ÊáâË©≤Ê≠£Á¢∫Êõ¥Êñ∞
      expect(document.getElementById('error-container')).not.toHaveClass('hidden')
      expect(document.getElementById('error-title').textContent).toBe('ÊèêÂèñÂ§±Êïó')
      expect(document.getElementById('error-message').textContent).toBe('ÁÑ°Ê≥ïÈÄ£Êé•Âà∞ÊúçÂãôÂô®')
    })

    test('ÊáâË©≤ËÉΩÈ°ØÁ§∫ÊàêÂäüË®äÊÅØ', () => {
      // Given: ÊàêÂäüË®äÊÅØ
      const successMessage = 'Ë≥áÊñôÊèêÂèñÂÆåÊàê'

      // When: È°ØÁ§∫ÊàêÂäüË®äÊÅØ
      uiManager.showSuccess(successMessage)

      // Then: UI ÊáâË©≤Ê≠£Á¢∫Êõ¥Êñ∞
      expect(document.getElementById('success-container')).not.toHaveClass('hidden')
      expect(document.getElementById('success-message').textContent).toBe(successMessage)
    })

    test('ÊáâË©≤ËÉΩÊéßÂà∂ËºâÂÖ•ÁãÄÊÖãÈ°ØÁ§∫', () => {
      // Given: ËºâÂÖ•Ë®äÊÅØ
      const loadingMessage = 'Ê≠£Âú®ÊèêÂèñË≥áÊñô...'

      // When: È°ØÁ§∫ËºâÂÖ•ÁãÄÊÖã
      uiManager.showLoading(loadingMessage)

      // Then: ËºâÂÖ•Ë¶ÜËìãÂ±§ÊáâË©≤È°ØÁ§∫
      expect(document.getElementById('loading-overlay')).not.toHaveClass('hidden')

      // When: Èö±ËóèËºâÂÖ•ÁãÄÊÖã
      uiManager.hideLoading()

      // Then: ËºâÂÖ•Ë¶ÜËìãÂ±§ÊáâË©≤Èö±Ëóè
      expect(document.getElementById('loading-overlay')).toHaveClass('hidden')
    })
  })

  describe('üìä ÈÄ≤Â∫¶Ê¢ùÊéßÂà∂', () => {
    test('ÊáâË©≤ËÉΩÊõ¥Êñ∞ÈÄ≤Â∫¶Ê¢ùÈ°ØÁ§∫', () => {
      // Given: ÈÄ≤Â∫¶ÁôæÂàÜÊØî
      const percentage = 65

      // When: Êõ¥Êñ∞ÈÄ≤Â∫¶Ê¢ù
      uiManager.updateProgress(percentage)

      // Then: ÈÄ≤Â∫¶Ê¢ùÂØ¨Â∫¶ÊáâË©≤Ê≠£Á¢∫Ë®≠ÁΩÆ
      const progressBar = document.getElementById('progress-bar')
      expect(progressBar.style.width).toBe('65%')
    })

    test('ÊáâË©≤Ê≠£Á¢∫ËôïÁêÜÈÄ≤Â∫¶ÈÇäÁïåÂÄº', () => {
      // Given: ÈÇäÁïåÂÄºÊ∏¨Ë©¶Ê°à‰æã
      const testCases = [
        { input: -10, expected: '0%' },
        { input: 0, expected: '0%' },
        { input: 50, expected: '50%' },
        { input: 100, expected: '100%' },
        { input: 150, expected: '100%' }
      ]

      testCases.forEach(({ input, expected }) => {
        // When: Êõ¥Êñ∞ÈÄ≤Â∫¶
        uiManager.updateProgress(input)

        // Then: ÈÄ≤Â∫¶Ê¢ùÊáâË©≤Ë¢´Ê≠£Á¢∫ÈôêÂà∂
        const progressBar = document.getElementById('progress-bar')
        expect(progressBar.style.width).toBe(expected)
      })
    })
  })

  describe('üîß ÁãÄÊÖãÁÆ°ÁêÜÂàÜÈõ¢È©óË≠â', () => {
    test('ÊáâË©≤‰∏çÂÜçÁ∂≠Ë≠∑ÂÖßÈÉ®ÁãÄÊÖã', () => {
      // Given: UIManager ÂàùÂßãÂåñÂæå

      // When: Ê™¢Êü•ÂÖßÈÉ®ÁãÄÊÖã
      // Then: ÈáçÊßãÂæå‰∏çÊáâË©≤ÊúâÁãÄÊÖãÁÆ°ÁêÜÈÇèËºØ
      expect(uiManager.currentState).toBeUndefined()

      // getCurrentState ÊáâË©≤Âè™ËøîÂõûË®∫Êñ∑Ë≥áË®äÔºå‰∏çÂåÖÂê´Ê•≠ÂãôÁãÄÊÖã
      const state = uiManager.getCurrentState()
      expect(state).toHaveProperty('queuedUpdates')
      expect(state).toHaveProperty('updateScheduled')
      expect(state).toHaveProperty('elementsCount')
      expect(state).toHaveProperty('listenersCount')
      expect(state).toHaveProperty('timestamp')

      // ‰∏çÊáâË©≤ÂåÖÂê´Ê•≠ÂãôÁãÄÊÖã
      expect(state).not.toHaveProperty('loading')
      expect(state).not.toHaveProperty('error')
      expect(state).not.toHaveProperty('progress')
      expect(state).not.toHaveProperty('status')
    })

    test('UI Êõ¥Êñ∞‰∏çÊáâË©≤ÂåÖÂê´ÁãÄÊÖãÈÇèËºØ', () => {
      // Given: UI Êõ¥Êñ∞Êìç‰Ωú

      // When: ÂàÜÂà•Âü∑Ë°å UI Êõ¥Êñ∞‰∏¶È©óË≠â

      // Ê∏¨Ë©¶ÈåØË™§È°ØÁ§∫ÔºàÁ¥î UIÔºâ
      uiManager.showError({ title: 'ÈåØË™§', message: 'Ê∏¨Ë©¶', actions: [] })
      expect(document.getElementById('error-container')).not.toHaveClass('hidden')
      expect(document.getElementById('error-title').textContent).toBe('ÈåØË™§')

      // Ê∏¨Ë©¶ÊàêÂäüÈ°ØÁ§∫ÔºàÁ¥î UIÔºâ
      uiManager.showSuccess('ÊàêÂäü')
      expect(document.getElementById('success-container')).not.toHaveClass('hidden')
      expect(document.getElementById('success-message').textContent).toBe('ÊàêÂäü')

      // Ê∏¨Ë©¶ÈÄ≤Â∫¶Êõ¥Êñ∞ÔºàÁ¥î UIÔºâ
      uiManager.updateProgress(50)
      expect(document.getElementById('progress-bar').style.width).toBe('50%')

      // ÊúÄÈáçË¶ÅÁöÑÈ©óË≠âÔºöÁ¢∫‰øùÊ≤íÊúâÂÖßÈÉ®ÁãÄÊÖãË¢´‰øÆÊîπ
      expect(uiManager.currentState).toBeUndefined()
    })
  })

  describe('‚ö° ÊïàËÉΩÂÑ™ÂåñÂäüËÉΩ', () => {
    test('ÊáâË©≤ÊîØÊè¥ÊâπÊ¨° DOM Êõ¥Êñ∞', () => {
      // Given: Â§öÂÄã UI Êõ¥Êñ∞Êìç‰Ωú

      // When: Âü∑Ë°åÂ§öÂÄãÊõ¥Êñ∞ÔºàÊ∏¨Ë©¶ÊâπÊ¨°ËôïÁêÜÊòØÂê¶Ê≠£Â∏∏Ôºâ
      uiManager.updateProgress(25)
      uiManager.showLoading('ËºâÂÖ•‰∏≠...')
      uiManager.updateProgress(50)

      // Then: ÊâÄÊúâÊõ¥Êñ∞ÈÉΩÊáâË©≤Ê≠£Á¢∫ÊáâÁî®
      expect(document.getElementById('progress-bar').style.width).toBe('50%')
      expect(document.getElementById('loading-overlay')).not.toHaveClass('hidden')
    })
  })

  describe('üß™ Ê∏¨Ë©¶Áí∞Â¢ÉÁõ∏ÂÆπÊÄß', () => {
    test('ÊáâË©≤Âú® JSDOM Áí∞Â¢É‰∏≠Ê≠£Â∏∏Â∑•‰Ωú', () => {
      // Given: JSDOM Áí∞Â¢É
      expect(window).toBeDefined()
      expect(document).toBeDefined()

      // When: Âü∑Ë°å UI Êìç‰Ωú
      uiManager.showError({ title: 'JSDOM Ê∏¨Ë©¶', message: 'Ê∏¨Ë©¶Ë®äÊÅØ', actions: [] })

      // Then: ÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú
      expect(document.getElementById('error-title').textContent).toBe('JSDOM Ê∏¨Ë©¶')
    })
  })
})
