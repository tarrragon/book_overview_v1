# Readmoo 書庫數據提取器 Chrome Extension - Cursor 規則

## 🌐 語言與本地化要求
- 所有回應必須使用**繁體中文 (zh-TW)**
- 產品使用者和開發者為台灣人，使用台灣特有的程式術語
- 程式碼中的中文註解和變數命名嚴格遵循台灣語言慣例
- 如不確定用詞，優先使用英文而非大陸用語

## 🏗 架構設計原則

### 1. 單一責任原則 (Single Responsibility Principle)
- 每個函數、類別或模組只負責一個明確定義的功能
- 判斷責任範圍：如需用"和"或"或"描述功能，考慮拆分
- 模組化設計：確保組件邊界清晰，降低耦合
- 建議函數長度不超過 30 行，超過則考慮重構

### 2. 命名規範
- 使用描述性且有意義的名稱，清楚表明用途
- 函數名稱以動詞開頭 (如: calculateTotal, validateInput)
- 變數名稱使用名詞 (如: userProfile, paymentAmount)
- 布林變數使用 is, has, can 前綴 (如: isValid, hasPermission)
- 避免無意義的縮寫，除非廣泛接受 (如: HTTP, URL)
- 遵循專案既定的命名風格 (camelCase, snake_case 等) 保持一致性

### 3. 註解與文件規範
- 每個函數、類別或模組都必須有註解描述其目的和功能
- 註解應解釋"為什麼"這樣實作，而不只是"做了什麼"
- 複雜邏輯或非直覺實作必須有詳細註解
- 核心功能和關鍵邏輯必須遵循標準化註解結構：
  * 以簡短的功能目的描述開始
  * 使用"負責功能："列出責任清單
  * "設計考量："說明實作決策
  * "處理流程："用數字步驟記錄流程
  * "使用情境："說明何時及如何呼叫此函數
  * 對於會改變狀態的函數，清楚記錄狀態轉換 (如: 從 [State.A] 到 [State.B])
- 使用標準化註解格式，包含參數和回傳值描述
- 提供足夠的上下文讓非技術人員 (如產品經理) 理解程式流程
- 在整個程式碼庫中保持一致的文件結構

## 🧪 TDD (測試驅動開發) 嚴格要求

### Red-Green-Refactor 循環
- **嚴格遵循 Red-Green-Refactor 循環**
- **紅燈**: 必須先寫測試，確認測試失敗
- **綠燈**: 實現最小可用程式碼讓測試通過
- **重構**: 優化程式碼，保持所有測試通過

### TDD 規則
- ❗ **絕對不能在沒有測試的情況下寫程式碼**
- ❗ **每次只實現讓測試通過的最小程式碼**
- ❗ **重構時必須保持所有測試通過**
- ❗ **定期執行完整測試套件**

### 測試覆蓋率要求
- 單元測試覆蓋率 ≥ 90%
- 整合測試覆蓋率 ≥ 80%
- 端對端測試覆蓋率 ≥ 70%

## 🎭 事件驅動架構 (Event-Driven Architecture)

### 事件命名規範
- 格式: `MODULE.ACTION.STATE`
- 範例: `EXTRACTOR.DATA.EXTRACTED`、`STORAGE.SAVE.COMPLETED`

### 事件優先級
- `URGENT` (0-99): 系統關鍵事件
- `HIGH` (100-199): 使用者互動事件
- `NORMAL` (200-299): 一般處理事件  
- `LOW` (300-399): 背景處理事件

### 事件處理原則
- 每個模組通過事件總線通訊
- 避免直接模組間依賴
- 事件處理器必須有錯誤處理機制
- 實現事件的重試與降級機制

## 🏗 Chrome Extension 特定要求

### Manifest V3 規範
- 嚴格遵循 Manifest V3 API
- 使用 Service Worker 而非 Background Pages
- 實現適當的權限請求策略

### 安全性要求
- 所有資料處理在本地進行
- 避免將敏感資料傳送到外部服務
- 實現適當的 CSP (Content Security Policy)

### 跨上下文通訊
- Background ↔ Content Script: chrome.runtime 訊息傳遞
- Popup ↔ Background: 直接 API 呼叫
- Overview ↔ Background: chrome.storage 事件監聽

## 📝 程式碼品質要求

### 程式碼撰寫
- 優先考慮可讀性和可維護性，而非過度最佳化
- 防禦性程式設計：驗證輸入參數，處理邊界情況和例外
- 必須立即修正明顯的 linter 錯誤
- 同一檔案的 linter 錯誤修正不超過 3 次循環

### 錯誤處理
- 清楚定義錯誤處理策略
- 使用有意義的錯誤訊息協助問題診斷
- 在適當層級處理例外，避免例外洩漏
- 記錄關鍵錯誤訊息供後續分析

## 📁 檔案與專案管理

### 檔案操作原則
- **絕對不創建非必要的檔案**
- **優先編輯現有檔案而非創建新檔案**
- **永不主動創建文件檔案 (*.md) 或 README 檔案**，除非使用者明確要求
- 臨時檔案和輔助腳本在任務完成後必須清理

### 版本控制要求
- 每個小功能完成後必須：
  1. 更新 `docs/todolist.md` 進度
  2. 更新工作日誌 `docs/work-logs/vX.X.X-work-log.md`
  3. **強制更新 `CHANGELOG.md`** 記錄小版本號 (v0.X.Y)
  4. 提交 git commit
- Commit 訊息使用 [Conventional Commits](https://www.conventionalcommits.org/) 格式
- 每次 commit 前執行完整測試套件

#### 版本號管理規範
- **小版本號 (v0.X.Y)**: 對應每個 TDD 循環完成
  - 例：v0.3.1 (Manifest V3), v0.3.2 (Background), v0.3.3 (Content Script)
- **中版本號 (v0.X.0)**: 對應主要功能模組完成
  - 例：v0.1.0 (事件系統), v0.2.0 (資料提取器), v0.3.0 (Chrome Extension)
- **主版本號 (v1.0.0)**: 產品完整功能，準備上架
- **每個 TDD 循環必須對應一個小版本號記錄**
- **CHANGELOG.md 必須詳細記錄每個版本的具體功能和改進**

### 工作日誌管理規範
- **建立時機**: 每個中版本號變更時建立新的工作日誌檔案
- **檔案命名**: `docs/work-logs/vX.X.X-work-log.md`
- **更新頻率**: 每完成一個 TDD 循環或重要修復後立即更新
- **記錄內容**:
  * TDD 循環的完整 Red-Green-Refactor 過程
  * **詳細的思考過程和決策邏輯**
  * **問題發現過程**: 如何檢查到錯誤、錯誤症狀描述
  * **問題原因分析**: 深入分析錯誤為什麼會發生、根本原因追溯
  * **解決方案過程**: 解決方法的選擇、嘗試過程、最終方案
  * **重構思路**: 原程式碼的不佳問題、優化思路、改善效果
  * 程式碼變更的具體內容和影響範圍
  * 學習重點與最佳實踐心得
  * 測試狀態變化和測試策略調整
  * 相關提交記錄和版本追蹤
  * **架構決策與專案結構調整**
  * **文檔結構重組與開發順序變更**
  * **技術棧選擇與工具變更決策**
  * **除錯過程**: 包含錯誤訊息、診斷步驟、修復驗證
  * **效能優化**: 效能問題識別、分析方法、優化成果
- **強制要求**: 
  * 無論 todolist 更新、功能修復、程式碼修改、**架構調整**、**文檔重組** 都必須先記錄工作日誌
  * 每次工作日誌更新後必須立即 commit
  * 不得跳過工作日誌直接進行下一步開發
  * **重要架構決策必須記錄決策原因、影響範圍、預期效益**
  * **問題修復必須記錄完整的診斷→分析→解決→驗證流程**
  * **重構必須說明原程式碼問題、改善方向、優化效果**

### 專案結構
- 嚴格遵循 `docs/struct.md` 中定義的目錄結構
- 所有文件檔案放在 `docs/` 資料夾
- 根目錄保持簡潔，只放置實際專案檔案

## 🔧 工具與環境

### 開發工具
- **測試框架**: Jest + Chrome Extension API Mocks
- **建置工具**: npm scripts
- **程式碼檢查**: ESLint
- **版本控制**: Git

### 程式碼風格
- 使用 ES6+ 語法
- 優先使用 const/let 而非 var
- 使用模組化匯入/匯出
- 遵循 JSDoc 註解規範

## 📊 進度追蹤

### 任務管理
- 所有任務記錄在 `docs/todolist.md`
- 使用圖例追蹤進度：⭕ 待開始、🔴 紅燈、🟢 綠燈、🔵 重構、✅ 完成
- 每完成一個 TDD 循環立即更新狀態

### 里程碑追蹤
- v0.0.x: 基礎架構與測試框架
- v0.x.x: 開發階段，逐步實現功能
- v1.0.0: 完整功能，準備上架 Chrome Web Store

## 🚨 重要提醒

1. **絕對遵循 TDD**: 沒有測試就不寫程式碼
2. **保持測試通過**: 任何時候都不能讓測試套件失敗
3. **文件同步更新**: 程式碼變更後立即更新相關文件
4. **版本追蹤**: 每個功能完成後更新版本記錄
5. **繁體中文**: 所有溝通和文件使用台灣繁體中文

---

**最後更新**: 2025-07-29  
**適用版本**: v0.0.1+ 