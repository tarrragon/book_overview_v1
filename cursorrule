# CLAUDE.md

本文件為 Claude Code (claude.ai/code) 在此專案中的開發指導規範。

## 🚨 任何行動前的強制檢查清單

**💡 記憶口訣**: 測試先行，問題必解，架構為王，品質不妥協

### 三大不可違反的鐵律

1. **測試通過率鐵律**  
   **100% 通過率是最低標準**
   - 任何測試失敗 = 立即修正，其他工作全部暫停
   - 不存在「夠好的通過率」，只有 100% 或失敗

2. **永不放棄鐵律**  
   **沒有無法解決的問題**
   - 遇到複雜問題 → 設計師分析 → 分解 → 逐一解決
   - 禁用詞彙：「太複雜」「暫時」「跳過」「之後再改」

3. **架構債務零容忍鐵律**  
   **架構問題 = 立即停止功能開發**
   - 發現設計缺陷 → 立即修正 → 繼續開發
   - 修復成本隨時間指數增長，立即處理是唯一選擇

### ⚡ 30秒快速檢查

- [ ] 測試通過率是否 100%？不是則立即修正
- [ ] 是否想跳過/暫緩任何問題？違反永不放棄原則
- [ ] 是否發現架構債務？立即停止功能開發優先修正

---

## 🚀 Claude Session 啟動檢查流程

每次啟動新的 Claude Code session 時，必須執行以下標準檢查流程，確保開發環境準備就緒且狀態同步。

### 📋 強制啟動檢查清單

**使用 `/startup-check` 命令執行完整檢查，或手動依序確認：**

#### 1. Git 狀態同步檢查
- [ ] 檢查遠端分支狀態: `git fetch origin`
- [ ] 比較本地與遠端進度: `git status -uno`
- [ ] **如果遠端領先**: 執行 `git pull origin [branch]` 同步
- [ ] **如果本地領先**: 確認是否需要推送或繼續開發
- [ ] 確認工作目錄狀態: 無未提交的重要變更

#### 2. TMux 環境檢查
- [ ] 檢查是否在 tmux 環境: `echo $TMUX`
- [ ] 確認 session 名稱: `tmux display-message -p '#S'`
- [ ] **如果在 main_layout session**: 按照 TMux 面板分工配置執行
- [ ] **如果不在 tmux**: 建議切換至 `main_layout` 以獲得最佳協作體驗
- [ ] 驗證面板數量: 確認有 5 個面板 (1,2,2 佈局)

#### 3. 專案文件載入確認
- [ ] 確認已載入 CLAUDE.md 主文件
- [ ] 確認已載入參考文件:
  - [ ] docs/claude/tdd-collaboration-flow.md
  - [ ] docs/claude/document-responsibilities.md
  - [ ] docs/claude/agent-collaboration.md
  - [ ] docs/claude/chrome-extension-specs.md
  - [ ] docs/claude/event-driven-architecture.md
  - [ ] docs/claude/code-quality-examples.md
- [ ] 檢查 todolist.md 當前狀態和優先級

#### 4. 開發狀態確認
- [ ] 檢查當前版本號: 查看最新工作日誌
- [ ] 確認最新 CHANGELOG.md 版本記錄
- [ ] 識別當前階段: 開發/測試/重構/發布
- [ ] 確認待處理的緊急問題或技術債務

### ⚡ 快速啟動檢查命令

**建議的啟動檢查指令**:
```bash
# 使用 Claude 命令快速檢查
/startup-check

# 或手動執行關鍵檢查
git fetch origin && git status -uno
echo "TMux Session: $(tmux display-message -p '#S' 2>/dev/null || echo 'Not in tmux')"
echo "當前版本: $(ls docs/work-logs/ | grep '^v[0-9]' | sort -V | tail -1)"
```

### 🔧 常見啟動情境處理

#### 情境A: 遠端分支領先
```bash
git fetch origin
git pull origin [current-branch]  # 同步遠端變更
# 檢查是否有合併衝突，如有則先解決
```

#### 情境B: 需要進入 TMux 環境
```bash
# 推薦使用統一連接腳本 (自動處理各種情境)
./scripts/attach-main-layout.sh

# 或手動處理：
# 如果已有 main_layout session
tmux attach-session -t main_layout

# 在 tmux 內切換到 main_layout
tmux switch-client -t main_layout

# 建立新的 main_layout session
tmux new-session -s main_layout
```

#### 情境C: 文件載入不完整
- 確認所有參考文件都在 Claude 的 context 中
- 重新讀取缺失的關鍵指導文件
- 檢查 todolist.md 以了解當前工作重點

### 🚨 啟動檢查失敗處理

**如果啟動檢查發現問題**：
1. **立即停止開發工作**
2. **優先解決環境同步問題**
3. **確保所有檢查項目通過後才開始開發**
4. **記錄問題和解決方案以改善未來啟動流程**

**避免在不完整的環境狀態下開始開發，這會導致：**
- 版本衝突和合併問題
- 重複工作和效率損失
- 不一致的開發決策
- 技術債務累積

---

## 📝 標準提交流程

### 🎯 Commit-As-Prompt 標準流程

**所有 Git 提交必須使用 `/commit-as-prompt` 指令**，確保高品質的提交訊息和完整的變更管理。

### 🤖 自動化工作日誌管理系統

**每次提交前強制執行工作日誌檢查**，自動化腳本會根據規則比對識別以下三種工作狀態：

#### 📊 三種工作狀態分類

1. **🔄 更新進行中的工作**
   - 當前工作項目仍在進行中
   - 在現有工作日誌中新增今日記錄
   - 保持工作的連續性和完整性

2. **🆕 開始新的工作項目**  
   - 上一個工作已經完成並有總結
   - 建立新的版本工作日誌檔案
   - 確保版本號正確 (避免錯誤的 v1.0.0 標記)

3. **✅ 完成當前工作**
   - 當前工作項目已達成目標
   - 新增完成總結和成果記錄
   - 明確標記工作完成狀態

#### 🚨 版本管理關鍵原則

**避免版本號錯誤判斷**：
- ⚠️ **禁止使用不當版本號**: 如當前處於 0.9.x 階段卻使用 v1.0.0 標記
- ✅ **版本號必須反映真實進度**: 基於 package.json 或實際開發狀態
- 📝 **完成標記規範**: 工作完成時必須有明確的總結和狀態標記
- 🔄 **連續性保證**: 確保工作記錄的時間線和狀態轉換清晰

#### 🛠 自動化管理工具使用

**主要指令**：
```bash
# 工作日誌自動化管理 (選擇合適的工作狀態)
./scripts/work-log-manager.sh

# 工作日誌檢查 (提交前自動執行)  
./scripts/check-work-log.sh

# 完整提交流程 (包含工作日誌檢查)
/commit-as-prompt
```

#### 📋 提交前必要步驟

1. **環境檢查**: 確保已執行 `/startup-check` 且所有項目通過
2. **變更分析**: 理解所有待提交的變更內容和影響
3. **程式碼清理**: 移除臨時程式碼、無用匯入、除錯語句
4. **檔案挑選**: 使用 `git add -p` 精準選擇相關變更

#### 🏷️ 提交類型規範

- **prompt:** - 需要轉換為 AI 上下文的功能變更
- **feat:** - 新增功能
- **fix:** - 錯誤修復  
- **docs:** - 文件更新
- **refactor:** - 重構

#### 📝 WHAT/WHY/HOW 強制格式

每個提交必須包含：
- **WHAT**: 具體動作與對象（使用祈使句）
- **WHY**: 業務需求、技術債務背景、問題根因
- **HOW**: 實作策略、相容性考量、驗證方式

#### 🚀 面板3標準作業

```bash
# 在面板3執行標準提交流程
/commit-as-prompt

# 系統將引導完成：
# 1. 變更檢查與清理
# 2. 檔案挑選與暫存  
# 3. 提交訊息撰寫（WHAT/WHY/HOW）
# 4. 推送與文件同步
```

---

## 📋 分層文件管理規範

### 🏗 三層架構文件責任劃分

#### 1️⃣ **工作日誌 (docs/work-logs/)** - 小版本開發追蹤
**檔案格式**: `v0.10.x-[feature-name].md`

**責任範圍**：
- ✅ **小版本開發需求記錄** (如 v0.10.12, v0.10.13)
- ✅ **TDD 四階段詳細進度** (Phase 1-4 完整追蹤)
- ✅ **技術實作過程文檔** (程式碼變更、問題解決)
- ✅ **完成狀態確認與成果** (✅/🔄 明確標示)
- ✅ **效益評估與品質驗證** (測試結果、效能指標)

#### 2️⃣ **todolist.md** - 中版本功能規劃
**責任範圍**：
- 🎯 **當前中版本系列目標** (如 v0.10.x 整體規劃)
- 🎯 **功能模組優先級排序** (Critical/High/Medium)
- 🎯 **下一步開發方向指引** (基於當前完成狀態)
- 🎯 **技術債務管理策略** (lint 問題、測試修復)

**內容原則**: 精簡化，移除歷史詳細進度，專注當前中版本規劃

#### 3️⃣ **ROADMAP.md** - 大版本戰略藍圖
**責任範圍**：
- 🚀 **大版本里程碑定義** (v0.x → v1.0 戰略目標)
- 🚀 **長期功能演進藍圖** (核心功能發展路徑)
- 🚀 **架構演進計畫** (技術選型與重構計畫)
- 🚀 **市場需求與技術對照** (用戶價值與實現可行性)

### 🔄 版本推進決策機制

#### **版本層級判斷邏輯**：
1. **小版本推進** (v0.10.12 → v0.10.13)：
   - 觸發條件：當前工作日誌標記 ✅ 完成
   - 自動化檢查：commit-as-prompt 執行工作日誌完成確認
   - 推進方式：自動建立下一版本工作日誌

2. **中版本推進** (v0.10.x → v0.11.x)：
   - 觸發條件：todolist.md 中版本目標全部達成
   - 確認機制：Claude Code 提示確認是否推進
   - 推進方式：更新 todolist.md 中版本規劃

3. **大版本推進** (v0.x → v1.x)：
   - 觸發條件：**僅依用戶明確指令**
   - 確認機制：用戶主動要求大版本升級
   - 推進方式：更新 ROADMAP.md 和 todolist.md

### 🤖 commit-as-prompt 整合機制

#### **提交前自動檢查流程**：

```bash
# 1. 工作日誌狀態檢查
./scripts/check-work-log.sh
# 檢查當前工作是否完成，標記完成狀態

# 2. 下一步目標確認  
./scripts/check-next-objectives.sh
# 從 todolist.md 讀取下一步開發方向

# 3. 版本推進判斷
./scripts/version-progression-check.sh
# 判斷是否需要版本推進，提供建議
```

#### **工作流程整合**：
- **每次提交**: 自動更新當前工作日誌進度
- **功能完成**: 標記工作日誌 ✅，從 todolist 確認下一步
- **中版本完成**: 提示檢查 todolist 是否需要更新中版本目標
- **大版本**: 等待用戶指令，不自動推進

### 📊 文件同步更新原則

#### **優先級與更新頻率**：
1. **工作日誌**: 每日更新，實時記錄開發進度
2. **todolist.md**: 每個小版本完成後檢查更新
3. **ROADMAP.md**: 每個中版本完成後檢查更新
4. **CHANGELOG.md**: 每次 commit-as-prompt 自動更新

#### **一致性維護**：
- 版本號必須跨文件一致 (package.json 為準)
- 完成狀態標記統一格式 (✅/🔄/❌)
- 功能描述用語遵循專案規範字典

---

### 📚 核心規範快速導覽

**日常開發必讀**：
[- 🤝 TDD 協作開發流程](docs/claude/tdd-collaboration-flow.md) - 四階段開發流程
[- 📚 專案文件責任明確區分](docs/claude/document-responsibilities.md) - 文件寫作規範
[- 🤖 Agent 協作規範](docs/claude/agent-collaboration.md) - Sub-agent 使用指南

**專案特定規範**：
[- 📦 Chrome Extension 與專案規範](docs/claude/chrome-extension-specs.md) - 平台特定要求
[- 🎭 事件驅動架構規範](docs/claude/event-driven-architecture.md) - 架構模式指引

### 🔍 詳細執行指導

[- 🚨 違規警報與預防](docs/claude/violation-prevention.md)
[- 📋 關鍵情境決策流程](docs/claude/decision-workflows.md)
[- 🔍 自我監控與糾錯機制](docs/claude/self-monitoring.md)
[- 🧭 程式碼品質範例彙編](docs/claude/code-quality-examples.md)

---

## 🚀 Claude Code 專用指令說明

### `/startup-check` - 環境檢查指令

**功能**: 執行完整的開發環境檢查和初始化

**檢查項目**:
1. **Git 狀態同步**: 檢查本地與遠端分支狀態
2. **TMux 環境設定**: 自動設定標準 1,2,2 佈局 (5個面板)  
3. **專案檔案載入**: 確認關鍵檔案存在且 Claude Code 已正確載入
4. **開發狀態確認**: 檢查版本、測試狀態、程式碼品質

**使用時機**:
- 每次啟動新的 Claude Code session
- 切換專案或分支後
- 環境配置出現問題時

### `/commit-as-prompt` - 自動化提交指令

**功能**: 執行完整的自動化提交流程，包含工作日誌管理

**執行步驟**:
0. **自動化工作日誌檢查**: 腳本規則比對判斷工作狀態並管理日誌
1. **變更分析**: 檢查工作區和暫存區狀態
2. **程式碼清理**: 移除臨時程式碼和無用內容  
3. **檔案挑選**: 使用 `git add -p` 精準選擇變更
4. **提交資訊**: 遵循 WHAT/WHY/HOW 格式
5. **推送同步**: 確保工作日誌和相關文件已包含

**自動化工作日誌功能**:
- 自動檢測版本號正確性
- 規則比對識別三種工作狀態 (更新/新建/完成)
- 提供互動式工作日誌管理
- 防止版本錯誤判斷 (如錯誤的 v1.0.0 標記)

### `./scripts/work-log-manager.sh` - 工作日誌管理腳本

**功能**: 互動式工作日誌管理系統

**三種狀態選擇**:
1. **📝 更新進行中的工作**: 在現有日誌中新增今日記錄  
2. **🆕 開始新的工作項目**: 建立新版本的工作日誌檔案
3. **✅ 完成當前工作**: 新增工作完成總結和狀態標記

**版本管理特色**:
- 自動從 package.json 獲取正確版本號
- 分析歷史工作日誌推斷下一版本
- 避免版本號錯誤判斷
- 提供標準化的工作日誌模板

### `./scripts/setup-tmux-layout.sh` - TMux 佈局設定腳本

**功能**: 設定標準的開發環境佈局

**佈局特色**:
- 1,2,2 佈局 (5個面板)
- 自動重新命名 session 為 `main_layout`
- 自動化處理已存在的 session
- 檢測面板中運行的程序，避免覆蓋重要工作

### `./scripts/attach-main-layout.sh` - TMux 連接腳本

**功能**: 統一處理各種 TMux 連接情境

**處理情況**:
- 新建 main_layout session
- 連接已存在的 session  
- 從其他 session 切換
- 確保文件載入一致性

---

## 📖 文件驅動開發流程

### 敏捷機制核心要求

- **任務設計與分派**: 預設目標為「最小、最快可交付」（MVP）
- **階段性交付**: 將大型重構分解成小型、可驗證的交付階段
- **高頻工作日誌更新**: 工作日誌作為站立會議，高頻更新進度、阻礙與決策
- **程式碼協作標註**: 使用 `//todo:` 標註協作溝通和改善方向
- **文件同步更新**: 程式碼變更後立即更新相關文件，包括工作日誌和版本記錄

### 技術文件寫作規範

**務實記錄風格**：使用具體數據和客觀描述，避免誇大用語

- ✅ 功能性描述："實作了 5層驗證策略"
- ✅ 量化效果："測試通過率從 92% 提升到 100%"
- ❌ 誇飾用語："完美解決"、"卓越表現"、"企業級"

---

## 🏗 架構債務管理核心原則

**核心原則**: 架構問題和設計債務是第一優先修正目標，絕不可「先將就」或「之後再處理」

### 🚨 立即處理原則

1. **架構問題發現 = 立即修正**: 一旦識別出架構債務，立即停止功能開發，優先修正
2. **修復成本會指數增長**: 架構問題拖延修復的成本隨時間呈指數增長
3. **絕不妥協的品質標準**: 寧可延遲功能發布，也不允許技術債務累積
4. **根本原因必須徹底解決**: 不接受「暫時性修正」或「症狀緩解」

### 🔍 架構債務分類與優先級

**🔴 Critical (必須立即停止開發修正)**:
- 違反 SOLID 原則的設計
- 模組間高耦合或循環依賴
- 不一致的錯誤處理模式
- 測試困難或無法測試的程式碼

**🟡 High (下一個TDD循環前必須修正)**:
- 程式碼重複超過 3 次
- 函數超過 30 行
- 模組責任不明確

### 程式碼品質規範

**語意化命名與單一句意原則**:
- 每個函式必須能以「一句話」清楚描述其目的與產出；無法以一句話表述時，優先檢視是否需「拆分職責」或「調整命名」。
- 函式名稱以動詞開頭，直接揭示行為與意圖；看到名稱即可推測輸入、輸出與副作用範圍。
- 變數名稱使用名詞，表意單一且不含糊；布林變數使用 `is`、`has`、`can` 前綴。
- 一致性：遵循專案既定命名風格與用語，避免非必要縮寫。

範例：請見 `docs/claude/code-quality-examples.md`

**檔案路徑語意規範（強制）**:
- 路徑需可「單看就理解」來源模組、功能核心與責任邊界（domain-oriented path）。
- **完整路徑名稱**：資料夾名稱需具體表意，讓 domain 結構一目了然。
- **禁止相對深度**：絕不使用 `../../../` 等相對深度計算方式。
- 匯入時以功能域為單位組織依賴，避免路徑語意與實際責任不一致。

範例：請見 `docs/claude/code-quality-examples.md`

**五事件評估準則（非硬性上限）**:
- 本專案採事件驅動；函式可協調多個事件/子作業以達成目標。「5」為責任複雜度的警示值，不是硬性行數限制。
- 若函式內直接協調「超過五個」離散事件或明確步驟，請檢查是否：a) 職責過於臃腫、b) 函式名稱未準確對齊行為、c) 應拆分為多個較小函式或委派至協調器。
- 評估面向：事件（或步驟）數量、分支層級、外部依賴數、狀態轉換次數；任一過高皆應發出重構信號。
- 行動指引：提煉私有輔助函式以維持公開 API 的單一句意；必要時引入事件總線/協調器拆分責任，確保函式名稱與實際行為保持一致。

範例：請見 `docs/claude/code-quality-examples.md`

**類別命名規範（Class）**:
- 命名採 PascalCase，格式建議：`<Domain><核心概念><角色/類型>`（例如：`ReadmooCatalogService`、`OverviewPageController`、`StandardError`）。
- 角色/類型常用後綴：`Service`、`Controller`、`Repository`、`Adapter`、`Coordinator`、`Factory`、`Validator`。
- 單一句意原則：類別名稱必須讓讀者立即理解責任邊界與用途；避免含糊名稱如 `Utils`、`Helper`（除非在該 domain 下有明確職責）。
- 位置與名稱對齊：類別應放在對應的 domain 路徑下，類別名稱與路徑語意一致（見「檔案路徑語意規範」）。
- 公開 API 範圍最小化：只暴露必要的公開方法，其餘以私有方法維持內聚。

**檔案與資料夾命名（File/Domain）**:
- 檔案命名沿用 `docs/README.md` 規範：`feature.type.js`（例如：`book-extractor.handler.js`）。
- 類別導向檔案：建議一檔一類；檔名以 kebab-case 對應類別語意與角色（例如：`readmoo-catalog.service.js` 對應 `ReadmooCatalogService`）。
- 資料夾（Domain）採 kebab-case，依功能域劃分；單看路徑即可理解來源與責任（domain-oriented path）。
- 聚合匯出使用 `index.js` 僅作 barrel；避免在 `index.js` 混合過多邏輯。
- 匯入寫法需避免相對深度，改用語意化根路徑（見「檔案路徑語意規範」）。

**類別/單檔複雜度拆分準則**:
- 五協作者/五事件警示：若單一類別或檔案直接協調的事件、外部依賴、協作者超過 5，需檢討是否職責臃腫或命名不符，考慮拆分或引入協調器。
- 公開方法數警示：公開方法數 > 5 應評估拆分為更聚焦的角色（如 `Validator`、`Repository`、`Coordinator`）。
- 匯出數警示：單一檔案匯出（default + named）> 3 應評估分檔或聚合至 barrel。
- 控制流程警示：巢狀層級 > 3、跨域依賴過多、狀態轉換複雜時，優先降低協作面或抽出子模組。
- 行動指引：
  - 提煉子服務：把驗證、轉換、存取層抽為專責類別/模組。
  - 引入協調器：以 `Coordinator` 組裝多個專職服務，維持單一句意的公開 API。
  - 調整命名：讓名稱與實際責任對齊，避免名不副實導致誤用。

範例：請見 `docs/claude/code-quality-examples.md`

---

## 🖥 開發環境配置

### TMux 面板分工配置 (1,2,2 佈局)

使用 `main_layout` session 的五面板配置來實現高效的 TDD 協作開發：

```
┌─────────────────────────────────────┐
│      面板0: 主要開發工作            │  (上層全幅)
│      (測試、編碼)                   │
├─────────────────┬───────────────────┤
│    面板1:       │     面板2:        │  (中層左右)
│   文件更新      │   程式碼品質檢查   │
│ (日誌、TODO等)  │ (lint、build等)   │
├─────────────────┼───────────────────┤
│    面板3:       │     面板4:        │  (下層左右)
│   Git 操作      │   監控和分析      │
│ (提交、狀態等)  │ (日誌、效能等)    │
└─────────────────┴───────────────────┘
```

### 面板職責分工

- **面板0（主線程）**: 主要開發工作（測試、編碼）
- **面板1（中左）**: 文件更新（工作日誌、TODO、CHANGELOG）
- **面板2（中右）**: 程式碼品質檢查（lint、build、coverage）
- **面板3（下左）**: Git 操作（狀態檢查、提交準備）- 標準提交流程使用 `/commit-as-prompt` 指令
- **面板4（下右）**: 監控和分析（日誌查看、效能監控）

### TMux 操作指令

```bash
# 建立/切換到主佈局
tmux attach-session -t main_layout

# 在 tmux 內部切換 session（推薦）
tmux switch-client -t main_layout

# 使用快捷鍵切換
# Ctrl+b 然後按 s -> 選擇 main_layout -> Enter

# 面板間切換
# Ctrl+b 然後按方向鍵
# 或 Ctrl+b 然後按面板編號 (0-4)
```

### 開發工作流程與監控機制

此配置的核心目的是**實時監控並確認正確觸發指定的開發流程**：

1. **主線程（面板0）**: 執行核心 TDD 循環（Red-Green-Refactor）
2. **文件同步（面板1）**: 即時更新工作日誌、TODO 狀態、版本記錄
3. **品質把關（面板2）**: 持續執行 lint、build、coverage 檢查
4. **版本控制（面板3）**: 監控 git 狀態，適時提醒提交節點
5. **系統監控（面板4）**: 觀察效能指標、錯誤日誌、建置狀態

### 流程觸發檢查點

- **文件更新觸發時機**: 完成 TDD 循環、功能里程碑、問題解決
- **代碼審查介入點**: lint 失敗、coverage 下降、架構債務發現
- **提交準備檢查**: 測試通過、文件同步、品質標準達成

---

## 🔧 開發工具和指令

### 測試指令

```bash
# 執行所有測試
npm test

# 執行特定類型測試
npm run test:unit
npm run test:integration
npm run test:e2e

# 執行測試並產生覆蓋率報告
npm run test:coverage
```

### 建置指令

```bash
# 安裝依賴項
npm install --legacy-peer-deps

# 開發版本建置
npm run build:dev

# 生產版本建置
npm run build:prod
```

### 程式碼品質指令

```bash
# 執行程式碼檢查
npm run lint

# 自動修正程式碼檢查問題
npm run lint:fix

# 清理建置產物
npm run clean
```

---

## 🚨 絕對禁止的妥協行為

- ❌ **「先這樣，之後再改」**: 架構問題必須當下解決
- ❌ **「測試之後再寫」**: 違反 TDD 原則
- ❌ **「這個 bug 不影響功能」**: 所有已知問題都必須修復
- ❌ **「複製貼上這段程式碼」**: 重複程式碼必須立即重構
- ❌ **「暫時用 try-catch 包起來」**: 錯誤處理必須有明確策略

---

## 📊 任務追蹤管理

### 任務管理

- 所有任務記錄在 `docs/todolist.md`
- 使用圖例追蹤進度：⭕ 待開始、🔴 紅燈、🟢 綠燈、🔵 重構、✅ 完成
- 每完成一個 TDD 循環立即更新狀態

### 里程碑追蹤

- v0.0.x: 基礎架構與測試框架
- v0.x.x: 開發階段，逐步實現功能
- v1.0.0: 完整功能，準備上架 Chrome Web Store

---

## 📚 重要文件參考

- `docs/todolist.md` - 開發任務追蹤
- `docs/work-logs/` - 詳細開發工作日誌
- `CHANGELOG.md` - 版本變更記錄
- `docs/domains/architecture/` - 架構設計文件
- `docs/domains/workflows/` - 開發流程規範
- `docs/domains/guidelines/` - 品質標準指引

---

## 語言規範

**所有回應必須使用繁體中文 (zh-TW)**

- 產品使用者和開發者為台灣人，使用台灣特有的程式術語
- 程式碼中的中文註解和變數命名嚴格遵循台灣語言慣例
- 如不確定用詞，優先使用英文而非中國用語

### 📚 專案用語規範

**參考文件**: [專案用語規範字典](docs/claude/terminology-dictionary.md)

**核心原則**:
1. **精確性優先**: 使用具體、明確的技術術語，避免模糊概念詞彙
2. **台灣在地化**: 優先使用台灣慣用的程式術語
3. **技術導向**: 明確說明實際的技術實現方式和決策邏輯來源

**重要禁用詞彙**:
- ❌ 「智能」- 應使用「自動化腳本」、「規則比對」、「條件判斷」等精確術語
- ❌ 「文檔」- 應使用「文件」(台灣用語)
- ❌ 「數據」- 應使用「資料」(台灣用語)
- ❌ 「默認」- 應使用「預設」(台灣用語)

**正確用語範例**:
- ✅ 「自動化腳本檢查」而非「智能檢查」
- ✅ 「規則比對分析」而非「智能分析」
- ✅ 「系統提示」而非「智能建議」
- ✅ 「版號同步」、「狀態檢測」、「指令執行」等明確術語

---

# important-instruction-reminders

Do what has been asked; nothing more, nothing less.
NEVER create files unless they're absolutely necessary for achieving your goal.
ALWAYS prefer editing an existing file to creating a new one.
NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.

IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.