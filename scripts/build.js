#!/usr/bin/env node
/**
 * Readmoo Êõ∏Â∫´ÊèêÂèñÂô® - Á∑®Ë≠ØËÖ≥Êú¨
 * Ë≤†Ë≤¨Âª∫Á´ãÁîüÁî¢ÂíåÈñãÁôºÁâàÊú¨ÁöÑ Chrome Extension
 */

const fs = require('fs');
const path = require('path');

const MODE = process.argv.includes('--prod') ? 'production' : 'development';
const BUILD_DIR = path.join(__dirname, '..', 'build', MODE);
const SOURCE_DIR = path.join(__dirname, '..');

console.log(`üî® ÈñãÂßãÁ∑®Ë≠Ø ${MODE} ÁâàÊú¨...`);

// Âª∫Á´ãËº∏Âá∫ÁõÆÈåÑ
if (!fs.existsSync(path.dirname(BUILD_DIR))) {
  fs.mkdirSync(path.dirname(BUILD_DIR), { recursive: true });
}

if (!fs.existsSync(BUILD_DIR)) {
  fs.mkdirSync(BUILD_DIR, { recursive: true });
}

// ÈúÄË¶ÅË§áË£ΩÁöÑÊ™îÊ°àÂíåÁõÆÈåÑ
const filesToCopy = [
  'manifest.json',
  'src/',
  'assets/',
  'overview.html'
];

/**
 * ÈÅûËø¥Ë§áË£ΩÊ™îÊ°àÂíåÁõÆÈåÑ
 */
function copyRecursive(src, dest) {
  const stats = fs.statSync(src);
  
  if (stats.isDirectory()) {
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true });
    }
    
    const items = fs.readdirSync(src);
    items.forEach(item => {
      // Ë∑≥ÈÅéÊ∏¨Ë©¶Ê™îÊ°àÂíåÈñãÁôºÊ™îÊ°à
      if (item.includes('.test.') || item.includes('.spec.')) {
        return;
      }
      
      copyRecursive(
        path.join(src, item),
        path.join(dest, item)
      );
    });
  } else {
    // Ë§áË£ΩÊ™îÊ°à
    fs.copyFileSync(src, dest);
  }
}

/**
 * ‰∏ªË¶ÅÁ∑®Ë≠ØÊµÅÁ®ã
 */
function build() {
  try {
    // Ê∏ÖÁêÜËº∏Âá∫ÁõÆÈåÑ
    if (fs.existsSync(BUILD_DIR)) {
      fs.rmSync(BUILD_DIR, { recursive: true, force: true });
    }
    fs.mkdirSync(BUILD_DIR, { recursive: true });

    // Ë§áË£ΩÊ™îÊ°à
    filesToCopy.forEach(file => {
      const srcPath = path.join(SOURCE_DIR, file);
      const destPath = path.join(BUILD_DIR, file);
      
      if (fs.existsSync(srcPath)) {
        console.log(`üìÑ Ë§áË£Ω ${file}...`);
        copyRecursive(srcPath, destPath);
      } else {
        console.warn(`‚ö†Ô∏è  Ê™îÊ°à‰∏çÂ≠òÂú®: ${file}`);
      }
    });

    // ËÆÄÂèñ‰∏¶ËôïÁêÜ manifest.json
    const manifestPath = path.join(BUILD_DIR, 'manifest.json');
    if (fs.existsSync(manifestPath)) {
      const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
      
      // ÁîüÁî¢Ê®°ÂºèÁöÑÁâπÊÆäËôïÁêÜ
      if (MODE === 'production') {
        // ÁßªÈô§ÈñãÁôºÂ∞àÁî®ÁöÑÊ¨äÈôêÂíåÈÖçÁΩÆ
        console.log('üöÄ Â•óÁî®ÁîüÁî¢Ê®°ÂºèÈÖçÁΩÆ...');
      }
      
      fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
    }

    console.log(`‚úÖ Á∑®Ë≠ØÂÆåÊàêÔºÅËº∏Âá∫ÁõÆÈåÑ: ${BUILD_DIR}`);
    console.log(`üì¶ Ê™îÊ°àÊ∏ÖÂñÆ:`);
    
    // È°ØÁ§∫Á∑®Ë≠ØÁµêÊûú
    function listFiles(dir, prefix = '') {
      const items = fs.readdirSync(dir);
      items.forEach(item => {
        const fullPath = path.join(dir, item);
        const relativePath = path.relative(BUILD_DIR, fullPath);
        
        if (fs.statSync(fullPath).isDirectory()) {
          console.log(`${prefix}üìÅ ${relativePath}/`);
          if (prefix.length < 6) { // ÈôêÂà∂ÈÅûËø¥Ê∑±Â∫¶
            listFiles(fullPath, prefix + '  ');
          }
        } else {
          const size = fs.statSync(fullPath).size;
          console.log(`${prefix}üìÑ ${relativePath} (${size} bytes)`);
        }
      });
    }
    
    listFiles(BUILD_DIR);
    
    console.log(`\nüéØ ‰∏ã‰∏ÄÊ≠•:`);
    console.log(`1. Âú® Chrome ‰∏≠ËºâÂÖ•Ëß£Â£ìÁ∏ÆÁöÑÊì¥ÂÖÖÂäüËÉΩ`);
    console.log(`2. ÈÅ∏ÊìáÁõÆÈåÑ: ${BUILD_DIR}`);
    console.log(`3. Âú® Readmoo Á∂≤Á´ô‰∏äÊ∏¨Ë©¶ÂäüËÉΩ`);

  } catch (error) {
    console.error(`‚ùå Á∑®Ë≠ØÂ§±Êïó:`, error.message);
    process.exit(1);
  }
}

build();